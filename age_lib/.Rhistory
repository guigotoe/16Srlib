plot(seq_along(ddnet1)-1,ddnet1,type='b',xlim=c(0,15),ylim=c(0,0.5),ylab="Frequency",xlab="Degree",col=brewer.pal(8, "Set1")[1])
points(seq_along(ddnet2),ddnet2,type='b',col=brewer.pal(8, "Set1")[2])
points(seq_along(ddnet3),ddnet3,type='b',col=brewer.pal(8, "Set1")[3])
points(seq_along(ddnet4),ddnet4,type='b',col=brewer.pal(8, "Set1")[4])
points(seq_along(ddnet5),ddnet5,type='b',col=brewer.pal(8, "Set1")[5])
legend("topright",c("G1","G2","G3","G4","LLI"),col=brewer.pal(8, "Set1")[1:5],pch=1,lty=2)
plot(seq_along(ddnet1)-1,ddnet1,type='b',xlim=c(0,15),ylim=c(0,0.5),ylab="Frequency",xlab="Degree",col=brewer.pal(8, "Set1")[1])
points(seq_along(ddnet2),ddnet2,type='b',col=brewer.pal(8, "Set1")[2])
points(seq_along(ddnet3),ddnet3,type='b',col=brewer.pal(8, "Set1")[3])
points(seq_along(ddnet4),ddnet4,type='b',col=brewer.pal(8, "Set1")[4])
points(seq_along(ddnet5),ddnet5,type='b',col=brewer.pal(8, "Set1")[5])
legend("topright",c("G1","G2","G3","G4","LLI "),col=brewer.pal(8, "Set1")[1:5],pch=1,lty=1)
plot(seq_along(ddnet1)-1,ddnet1,type='b',xlim=c(0,15),ylim=c(0,0.5),ylab="Frequency",xlab="Degree",col=brewer.pal(8, "Set1")[1])
points(seq_along(ddnet2),ddnet2,type='b',col=brewer.pal(8, "Set1")[2])
points(seq_along(ddnet3),ddnet3,type='b',col=brewer.pal(8, "Set1")[3])
points(seq_along(ddnet4),ddnet4,type='b',col=brewer.pal(8, "Set1")[4])
points(seq_along(ddnet5),ddnet5,type='b',col=brewer.pal(8, "Set1")[5])
legend("topright",c("G1","G2","G3","G4","LLI  "),col=brewer.pal(8, "Set1")[1:5],pch=1,lty=1)
natcon <- function(ig) {
N   <- vcount(ig)
adj <- get.adjacency(ig)
evals <- eigen(adj)$value
nc  <- log(mean(exp(evals)))
nc / (N - log(N))
}
nc.attack <- function(ig) {
hubord <- order(rank(betweenness(ig)), rank(degree(ig)), decreasing=TRUE)
sapply(1:round(vcount(ig)*.8), function(i) {
ind <- hubord[1:i]
tmp <- delete_vertices(ig, V(ig)$name[ind])
natcon(tmp)
}) }
nc.g1 <- nc.attack(net1)
nc.g2 <- nc.attack(net2)
nc.g3 <- nc.attack(net3)
natcon <- function(ig) {
N   <- vcount(ig)
adj <- get.adjacency(ig)
evals <- eigen(adj)$value
nc  <- log(mean(exp(evals)))
nc / (N - log(N))
}
nc.attack <- function(ig) {
hubord <- order(rank(betweenness(ig)), rank(degree(ig)), decreasing=TRUE)
sapply(1:round(vcount(ig)*.8), function(i) {
ind <- hubord[1:i]
tmp <- delete_vertices(ig, V(ig)$name[ind])
natcon(tmp)
}) }
nc.g1 <- nc.attack(net1)
nc.attack <- function(ig) {
E(ig)$weight <- abs(weight)
hubord <- order(rank(betweenness(ig)), rank(degree(ig)), decreasing=TRUE)
sapply(1:round(vcount(ig)*.8), function(i) {
ind <- hubord[1:i]
tmp <- delete_vertices(ig, V(ig)$name[ind])
natcon(tmp)
}) }
nc.g1 <- nc.attack(net1)
nc.attack <- function(ig) {
E(ig)$weight <- abs(E(ig)$weight)
hubord <- order(rank(betweenness(ig)), rank(degree(ig)), decreasing=TRUE)
sapply(1:round(vcount(ig)*.8), function(i) {
ind <- hubord[1:i]
tmp <- delete_vertices(ig, V(ig)$name[ind])
natcon(tmp)
}) }
nc.g1 <- nc.attack(net1)
nc.g2 <- nc.attack(net2)
nc.g3 <- nc.attack(net3)
nc.g4 <- nc.attack(net4)
nc.g5 <- nc.attack(net5)
plot(seq(0,.8,len=length(nc.g1)), nc.g1, type='l', ylim=c(0,max(nc.g1)),
)
plot(seq(0,.8,len=length(nc.g1)), nc.g1, type='l', ylim=c(0,max(nc.g1)),xlab="Proportion of removed nodes", ylab="natural connectivity")
nc.g1
nc.attack <- function(ig) {
E(ig)$weight <- 1
hubord <- order(rank(betweenness(ig)), rank(degree(ig)), decreasing=TRUE)
sapply(1:round(vcount(ig)*.8), function(i) {
ind <- hubord[1:i]
tmp <- delete_vertices(ig, V(ig)$name[ind])
natcon(tmp)
}) }
nc.g1 <- nc.attack(net1)
plot(seq(0,.8,len=length(nc.g1)), nc.g1, type='l', ylim=c(0,max(nc.g1)),xlab="Proportion of removed nodes", ylab="natural connectivity")
nc.g1 <- nc.attack(net1)
nc.attack <- function(ig) {
hubord <- order(rank(betweenness(ig)), rank(degree(ig)), decreasing=TRUE)
sapply(1:round(vcount(ig)*.8), function(i) {
ind <- hubord[1:i]
tmp <- delete_vertices(ig, V(ig)$name[ind])
natcon(tmp)
}) }
nc.g1 <- nc.attack(net1)
nc.attack <- function(ig) {
E(ig)$weight <- abs(E(ig)$weight)
hubord <- order(rank(betweenness(ig)), rank(degree(ig)), decreasing=TRUE)
sapply(1:round(vcount(ig)*.8), function(i) {
ind <- hubord[1:i]
tmp <- delete_vertices(ig, V(ig)$name[ind])
natcon(tmp)
}) }
nc.g3
ig <- net3
hubord <- order(rank(betweenness(ig)), rank(degree(ig)), decreasing=TRUE)
E(ig)$weight <- abs(E(ig)$weight)
ig
hubord <- order(rank(betweenness(ig)), rank(degree(ig)), decreasing=TRUE)
hubord
vcount(ig)
get.adjacency(ig)
eigen(adj)$value
adj <- get.adjacency(ig)
eigen(adj)$value
evals <- eigen(adj)$value
nc  <- log(mean(exp(evals)))
nc
nc / (N - log(N))
nc / (N - log(N))
N   <- vcount(ig)
nc / (N - log(N))
natcon <- function(ig) {
N   <- vcount(ig)
adj <- get.adjacency(ig)
evals <- eigen(adj)$value
nc  <- log(mean(exp(evals)))
return(nc / (N - log(N)))
}
nc.attack <- function(ig) {
E(ig)$weight <- abs(E(ig)$weight)
hubord <- order(rank(betweenness(ig)), rank(degree(ig)), decreasing=TRUE)
sapply(1:round(vcount(ig)*.8), function(i) {
ind <- hubord[1:i]
tmp <- delete_vertices(ig, V(ig)$name[ind])
natcon(tmp)
}) }
nc.g3 <- nc.attack(net3)
nc.g3 <- nc.attack(net3)
round(nc/(N-log(N)))*.8
round(nc/(N-log(N)))
round(nc/(N-log(N)))*2
round(nc/(N-log(N)))*3
nc/(N-log(N))
nc/(N-log(N))*20
nc.attack <- function(ig) {
E(ig)$weight <- abs(E(ig)$weight)
hubord <- order(rank(betweenness(ig)), rank(degree(ig)), decreasing=TRUE)
sapply(1:round(vcount(ig)*20), function(i) {
ind <- hubord[1:i]
tmp <- delete_vertices(ig, V(ig)$name[ind])
natcon(tmp)
}) }
nc.g1 <- nc.attack(net1)
nc.g2 <- nc.attack(net2)
nc.g3 <- nc.attack(net3)
E(ig)$weight <- abs(E(ig)$weight)*40
nc.attack <- function(ig) {
E(ig)$weight <- abs(E(ig)$weight)*40
hubord <- order(rank(betweenness(ig)), rank(degree(ig)), decreasing=TRUE)
sapply(1:round(vcount(ig)*0.8), function(i) {
ind <- hubord[1:i]
tmp <- delete_vertices(ig, V(ig)$name[ind])
natcon(tmp)
}) }
nc.g1 <- nc.attack(net1)
nc.g2 <- nc.attack(net2)
nc.g3 <- nc.attack(net3)
nc.g4 <- nc.attack(net4)
nc.g5 <- nc.attack(net5)
plot(seq(0,.8,len=length(nc.g1)), nc.g1, type='l', ylim=c(0,max(nc.g1)),xlab="Proportion of removed nodes", ylab="natural connectivity")
nc.attack <- function(ig) {
E(ig)$weight <- abs(E(ig)$weight)*100
hubord <- order(rank(betweenness(ig)), rank(degree(ig)), decreasing=TRUE)
sapply(1:round(vcount(ig)*0.8), function(i) {
ind <- hubord[1:i]
tmp <- delete_vertices(ig, V(ig)$name[ind])
natcon(tmp)
}) }
nc.g1 <- nc.attack(net1)
nc.g1 <- nc.attack(net1)
evals
nc
N
N-log(N)
natcon <- function(ig) {
N   <- vcount(ig)
adj <- get.adjacency(ig)
evals <- eigen(adj)$value
nc  <- log(mean(exp(evals)))
nc #/ (N - log(N))
}
ig <- net3
nc.attack <- function(ig) {
E(ig)$weight <- abs(E(ig)$weight)
hubord <- order(rank(betweenness(ig)), rank(degree(ig)), decreasing=TRUE)
sapply(1:round(vcount(ig)*0.8), function(i) {
ind <- hubord[1:i]
tmp <- delete_vertices(ig, V(ig)$name[ind])
natcon(tmp)
}) }
nc.g1 <- nc.attack(net1)
plot(seq(0,.8,len=length(nc.g1)), nc.g1, type='l', ylim=c(0,max(nc.g1)),xlab="Proportion of removed nodes", ylab="natural connectivity")
E(ig)$weight <- abs(E(ig)$weight)
hubord <- order(rank(betweenness(ig)), rank(degree(ig)), decreasing=TRUE)
ind <- hubord[1:i]
ind <- hubord[1:0]
[1:0]
seq(1:0)
hubord[1:0]
tmp <- delete_vertices(ig, V(ig)$name[ind])
natcon(tmp)
natcon(ig)
ind <- hubord[1:2]
tmp <- delete_vertices(ig, V(ig)$name[ind])
natcon(tmp)
ind <- hubord[1:10]
tmp <- delete_vertices(ig, V(ig)$name[ind])
natcon(tmp)
natcon <- function(ig) {
N   <- vcount(ig)
adj <- get.adjacency(ig)
evals <- eigen(adj)$value
nc  <- log(mean(exp(evals)))
nc / (N - log(N))
}
ig <- net3
nc.attack <- function(ig) {
E(ig)$weight <- abs(E(ig)$weight)
hubord <- order(rank(betweenness(ig)), rank(degree(ig)), decreasing=TRUE)
sapply(1:round(vcount(ig)*0.8), function(i) {
ind <- hubord[1:i]
tmp <- delete_vertices(ig, V(ig)$name[ind])
natcon(tmp)
}) }
nc.g1 <- nc.attack(net1)
hist(diff(net1), breaks=30, col='red', ylim=c(0,80), main="Fragility rates")
hist(diff(nc.g1), breaks=30, col='red', ylim=c(0,80), main="Fragility rates")
plot(net1)
plot(net3)
plot(net1, layout=Nets.a$All_G1$layout, vertex.size=Nets.a$All_G1$vsize, vertex.label=NA,,edge.width=2)#abs(E(net$graph)$weight)*40)
plot(seq_along(ddnet1)-1,ddnet1,type='b',xlim=c(0,15),ylim=c(0,0.5),ylab="Frequency",xlab="Degree",col=brewer.pal(8, "Set1")[1])
points(seq_along(ddnet2),ddnet2,type='b',col=brewer.pal(8, "Set1")[2])
points(seq_along(ddnet3),ddnet3,type='b',col=brewer.pal(8, "Set1")[3])
points(seq_along(ddnet4),ddnet4,type='b',col=brewer.pal(8, "Set1")[4])
points(seq_along(ddnet5),ddnet5,type='b',col=brewer.pal(8, "Set1")[5])
legend("topright",c("G1","G2","G3","G4","LLI  "),col=brewer.pal(8, "Set1")[1:5],pch=1,lty=1)
install.packages("orca")
packages(c("metagenomeSeq","reshape2","optparse","pheatmap","vegan","clusterSim","Rlof","plyr","igraph","orca"))
orbits <- c(0,2,5,7,8,10,11,6,9,4,1) + 1
orbits
graphlets <- lapply(selist, function(x) count4(summary(Matrix::triu(x$refit))[,1:2])[,orbits])
selist <- list(Nets.a$All_G1$mb, Nets.a$All_G2$mb,Nets.a$All_G3$mb, Nets.a$All_G4$mb,Nets.a$All_LLI$mb, Nets.a$All_ALL$mb)
orbits <- c(0,2,5,7,8,10,11,6,9,4,1) + 1
graphlets <- lapply(selist, function(x) count4(summary(Matrix::triu(x$refit))[,1:2])[,orbits])
nc.g5 <- nc.attack(Nets.a$All_ALL$graph)
plot(seq(0,.8,len=length(nc.g5)), nc.g5, type='l', ylim=c(0,max(nc.g5)),xlab="Proportion of removed nodes", ylab="natural connectivity")
nc.attack <- function(ig) {
E(ig)$weight <- abs(E(ig)$weight)
hubord <- order(rank(betweenness(ig)), rank(degree(ig)), decreasing=TRUE)
sapply(1:round(vcount(ig)*0.8), function(i) {
ind <- hubord[1:i]
print(length(hubord))
tmp <- delete_vertices(ig, V(ig)$name[ind])
natcon(tmp)
}) }
nc.g1 <- nc.attack(net1)
ind
delete_vertices(ig, V(ig)$name[ind])
tmp <- delete_vertices(ig, V(ig)$name[ind])
tmp
V(ig)$name
V(ig)
names(V(ig))
V(ig)[1]
V(ig)[[ind]]
nc.attack <- function(ig) {
E(ig)$weight <- abs(E(ig)$weight)
hubord <- order(rank(betweenness(ig)), rank(degree(ig)), decreasing=TRUE)
sapply(1:round(vcount(ig)*0.8), function(i) {
ind <- hubord[1:i]
#print(length(hubord))
tmp <- delete_vertices(ig, V(ig)[[ind]])
natcon(tmp)
}) }
nc.g1 <- nc.attack(net1)
plot(seq(0,.8,len=length(nc.g1)), nc.g1, type='l', ylim=c(0,max(nc.g1)),xlab="Proportion of removed nodes", ylab="natural connectivity")
nc.g2 <- nc.attack(net2)
nc.g3 <- nc.attack(net3)
nc.g4 <- nc.attack(net4)
nc.g5 <- nc.attack(net5)
nc.g6 <- nc.attack(Nets.a$All_ALL$graph)
hist(diff(nc.g1), breaks=30, col='red', ylim=c(0,80), main="Fragility rates")
net6 <- Nets.a$All_ALL$graph
ddnet6 <- degree_distribution(net6,cumulative=F)
avedeg6 <- sum(seq_along(ddnet6)*ddnet5)-1
plot(seq_along(ddnet1)-1,ddnet1,type='b',xlim=c(0,15),ylim=c(0,0.5),ylab="Frequency",xlab="Degree",col=brewer.pal(8, "Set1")[1])
points(seq_along(ddnet2),ddnet2,type='b',col=brewer.pal(8, "Set1")[2])
points(seq_along(ddnet3),ddnet3,type='b',col=brewer.pal(8, "Set1")[3])
points(seq_along(ddnet4),ddnet4,type='b',col=brewer.pal(8, "Set1")[4])
points(seq_along(ddnet5),ddnet5,type='b',col=brewer.pal(8, "Set1")[5])
points(seq_along(ddnet6),ddnet5,type='b',col=brewer.pal(8, "Set1")[6])
legend("topright",c("G1","G2","G3","G4","LLI  ","ALL"),col=brewer.pal(8, "Set1")[1:6],pch=1,lty=1)
points(seq_along(ddnet6),ddnet6,type='b',col=brewer.pal(8, "Set1")[6])
points(seq_along(ddnet6),ddnet6,type='b',col=brewer.pal(8, "Set1")[7])
legend("topright",c("G1","G2","G3","G4","LLI  ","ALL"),col=brewer.pal(8, "Set1")[1:5,7],pch=1,lty=1)
legend("topright",c("G1","G2","G3","G4","LLI  ","ALL"),col=brewer.pal(8, "Set1")[c(1:5,7)],pch=1,lty=1)
plot(seq(0,.8,len=length(nc.g1)), nc.g1, type='l', ylim=c(0,max(nc.g1)),xlab="Proportion of removed nodes", ylab="natural connectivity")
points(seq(0,.8,len=length(nc.g2)), nc.g2, type='l',,col=brewer.pal(8, "Set1")[2])
points(seq(0,.8,len=length(nc.g3)), nc.g3, type='l',,col=brewer.pal(8, "Set1")[3])
points(seq(0,.8,len=length(nc.g4)), nc.g4, type='l',,col=brewer.pal(8, "Set1")[4])
points(seq(0,.8,len=length(nc.g5)), nc.g5, type='l',,col=brewer.pal(8, "Set1")[5])
points(seq(0,.8,len=length(nc.g6)), nc.g6, type='l',,col=brewer.pal(8, "Set1")[7])
legend("topright",c("G1","G2","G3","G4","LLI  ","ALL"),col=brewer.pal(8, "Set1")[c(1:5,7)],pch=1,lty=1)
nc.g1 <- nc.attack(net1)
nc.g2 <- nc.attack(net2)
nc.g3 <- nc.attack(net3)
nc.g4 <- nc.attack(net4)
nc.g5 <- nc.attack(net5)
nc.g6 <- nc.attack(net6)
points(seq(0,.8,len=length(nc.g2)), nc.g2, type='l',col=brewer.pal(8, "Set1")[2])
points(seq(0,.8,len=length(nc.g3)), nc.g3, type='l',col=brewer.pal(8, "Set1")[3])
points(seq(0,.8,len=length(nc.g4)), nc.g4, type='l',col=brewer.pal(8, "Set1")[4])
points(seq(0,.8,len=length(nc.g5)), nc.g5, type='l',col=brewer.pal(8, "Set1")[5])
points(seq(0,.8,len=length(nc.g6)), nc.g6, type='l',col=brewer.pal(8, "Set1")[7])
plot(seq(0,.8,len=length(nc.g1)), nc.g1, type='l', ylim=c(0,max(nc.g1)),xlab="Proportion of removed nodes", ylab="natural connectivity")
points(seq(0,.8,len=length(nc.g2)), nc.g2, type='l',col=brewer.pal(8, "Set1")[2])
points(seq(0,.8,len=length(nc.g3)), nc.g3, type='l',ylim=c(0,max(nc.g1)),col=brewer.pal(8, "Set1")[3])
points(seq(0,.8,len=length(nc.g4)), nc.g4, type='l',col=brewer.pal(8, "Set1")[4])
points(seq(0,.8,len=length(nc.g5)), nc.g5, type='l',col=brewer.pal(8, "Set1")[5])
points(seq(0,.8,len=length(nc.g6)), nc.g6, type='l',col=brewer.pal(8, "Set1")[7])
legend("topright",c("G1","G2","G3","G4","LLI  ","ALL"),col=brewer.pal(8, "Set1")[c(1:5,7)],pch=1,lty=1)
max(nc.g3)
max(nc.g6)
plot(seq(0,.8,len=length(nc.g1)), nc.g1, type='l', ylim=c(0,0.13),xlab="Proportion of removed nodes", ylab="natural connectivity")
points(seq(0,.8,len=length(nc.g2)), nc.g2, type='l',col=brewer.pal(8, "Set1")[2])
points(seq(0,.8,len=length(nc.g3)), nc.g3, type='l',ylim=c(0,max(nc.g1)),col=brewer.pal(8, "Set1")[3])
points(seq(0,.8,len=length(nc.g4)), nc.g4, type='l',col=brewer.pal(8, "Set1")[4])
points(seq(0,.8,len=length(nc.g5)), nc.g5, type='l',col=brewer.pal(8, "Set1")[5])
points(seq(0,.8,len=length(nc.g6)), nc.g6, type='l',col=brewer.pal(8, "Set1")[7])
plot(seq(0,.8,len=length(nc.g1)), nc.g1, type='l', ylim=c(0,0.013),xlab="Proportion of removed nodes", ylab="natural connectivity")
points(seq(0,.8,len=length(nc.g2)), nc.g2, type='l',col=brewer.pal(8, "Set1")[2])
points(seq(0,.8,len=length(nc.g3)), nc.g3, type='l',ylim=c(0,max(nc.g1)),col=brewer.pal(8, "Set1")[3])
points(seq(0,.8,len=length(nc.g4)), nc.g4, type='l',col=brewer.pal(8, "Set1")[4])
points(seq(0,.8,len=length(nc.g5)), nc.g5, type='l',col=brewer.pal(8, "Set1")[5])
points(seq(0,.8,len=length(nc.g6)), nc.g6, type='l',col=brewer.pal(8, "Set1")[7])
legend("topright",c("G1","G2","G3","G4","LLI  ","ALL"),col=brewer.pal(8, "Set1")[c(1:5,7)],pch=1,lty=1)
pdf(paste(opt$out,"ALL_DegreeDistribution.pdf",sep=''),width=8, height=5)
plot(seq_along(ddnet1)-1,ddnet1,type='b',xlim=c(0,15),ylim=c(0,0.5),ylab="Frequency",xlab="Degree",col=brewer.pal(8, "Set1")[1])
points(seq_along(ddnet2),ddnet2,type='b',col=brewer.pal(8, "Set1")[2])
points(seq_along(ddnet3),ddnet3,type='b',col=brewer.pal(8, "Set1")[3])
points(seq_along(ddnet4),ddnet4,type='b',col=brewer.pal(8, "Set1")[4])
points(seq_along(ddnet5),ddnet5,type='b',col=brewer.pal(8, "Set1")[5])
points(seq_along(ddnet6),ddnet6,type='b',col=brewer.pal(8, "Set1")[7])
legend("topright",c("G1","G2","G3","G4","LLI  ","ALL"),col=brewer.pal(8, "Set1")[c(1:5,7)],pch=1,lty=1)
dev.off()
pdf(paste(opt$out,"ALL_NetworkStability.pdf",sep=''),width=8, height=5)
plot(seq(0,.8,len=length(nc.g1)), nc.g1, type='l', ylim=c(0,0.013),xlab="Proportion of removed nodes", ylab="natural connectivity")
points(seq(0,.8,len=length(nc.g2)), nc.g2, type='l',col=brewer.pal(8, "Set1")[2])
points(seq(0,.8,len=length(nc.g3)), nc.g3, type='l',ylim=c(0,max(nc.g1)),col=brewer.pal(8, "Set1")[3])
points(seq(0,.8,len=length(nc.g4)), nc.g4, type='l',col=brewer.pal(8, "Set1")[4])
points(seq(0,.8,len=length(nc.g5)), nc.g5, type='l',col=brewer.pal(8, "Set1")[5])
points(seq(0,.8,len=length(nc.g6)), nc.g6, type='l',col=brewer.pal(8, "Set1")[7])
legend("topright",c("G1","G2","G3","G4","LLI  ","ALL"),col=brewer.pal(8, "Set1")[c(1:5,7)],pch=1,lty=1)
dev.off()
plot(seq_along(ddnet1)-1,ddnet1,type='b',xlim=c(0,15),ylim=c(0,0.5),ylab="Frequency",xlab="Degree",col=brewer.pal(8, "Set1")[1])
points(seq_along(ddnet2),ddnet2,type='b',col=brewer.pal(8, "Set1")[2])
points(seq_along(ddnet3),ddnet3,type='b',col=brewer.pal(8, "Set1")[3])
points(seq_along(ddnet4),ddnet4,type='b',col=brewer.pal(8, "Set1")[4])
points(seq_along(ddnet5),ddnet5,type='b',col=brewer.pal(8, "Set1")[5])
points(seq_along(ddnet6),ddnet6,type='b',col=brewer.pal(8, "Set1")[7])
legend("topright",c("G1","G2","G3","G4","LLI  ","ALL"),col=brewer.pal(8, "Set1")[c(1:5,7)],pch=1,lty=1)
toolbox <- paste(sep="/", script.basename, "toolbox.R")
#toolbox <- '/home/torres/Documents/Projects/Metagenome/r_scripts/16Srlib/age_lib/toolbox.R'
toolbox <- "/Users/guillermotorres/Documents/Proyectos/Doctorado/16Srlib/age_lib/toolbox.R"
source(toolbox)
#p <- '/home/torres/ikmb_storage/projects/16Srlib_test/'
p <- '/Users/guillermotorres/Documents/Proyectos/Doctorado/16Srlib_test/'
#p <- '/home/torres/Documents/Projects/Metagenome/r_scripts/16Srlib_test/'
packages(c("metagenomeSeq","vegan","ggplot2","RColorBrewer","RAM","PoiClaClu","zCompositions","reshape2"))
###### end ######
#* input *
f <- paste(p,'age/dataFcp.rds',sep='')#commandArgs()[6] # paste(p,'results/dataF.rds',sep='') #
vs <- 'group,Gender'#commandArgs()[7]# 'Salinity,Textura' #
vs <- unlist(strsplit(vs,','))
o <- paste(p,'age/',sep='')#commandArgs()[8] # paste(p,'results/',sep='') #
## ##
df <- readRDS(f)
pData(df)$group <- as.factor(unlist(apply(pData(df),1,function(x){
if (as.numeric(x[["Age"]]) < 40) {return("G1")
}else if (as.numeric(x[["Age"]]) > 39 & as.numeric(x[["Age"]]) < 60){ return("G2")
}else if (as.numeric(x[["Age"]]) > 59 & as.numeric(x[["Age"]]) < 80){ return("G3")
}else if (as.numeric(x[["Age"]]) > 79 & as.numeric(x[["Age"]]) < 90){ return("G4")
}else if (as.numeric(x[["Age"]]) > 89) return("LLI")
})))
dfc <- MRcounts(df,norm=T)
dfc.p <- t(cmultRepl(t(dfc),method="SQ",output="prop"))
dfp <- newMRexperiment(dfc.p,phenoData=AnnotatedDataFrame(pData(df)),featureData=AnnotatedDataFrame(fData(df)))
v
vs
v <- vs][1]
v <- vs[1]
tl <- 'Genus'
dfx <- MRcounts(dfp)
otu <- 'Ruminococcus'
head(pData(dfp))
head(fData(dfp))
fData(dfp)[fData(dfp)[[tl]]%in%otu,]
fData(dfp)[fData(dfp)[[tl]]%in%otu,1]
as.character(fData(dfp)[fData(dfp)[[tl]]%in%otu,1])
OTUsToKeep <-  as.character(fData(dfp)[fData(dfp)[[tl]]%in%otu,1])
dfx <- dfp[OTUsToKeep,]
dfx
df <- aggTax(dfp,lvl=tl)
df.t<- as.data.frame(t(MRcounts(df)))
gm <- cbind(df.t,pData(dfp)[v],id=pData(dfp)[1])
gm_m <- melt(gm,id.vars=c(v,"ID"))
gm_m
df.t<- as.data.frame(t(MRcounts(df)))
gm <- cbind(df.t,pData(df)[v],id=pData(df)[1])
gm
OTUsToKeep <-  as.character(fData(dfp)[fData(dfp)[[tl]]%in%otu,1])
dfx <- dfp[OTUsToKeep,]
df <- aggTax(dfx,lvl=tl)
df.t<- as.data.frame(t(MRcounts(df)))
gm <- cbind(df.t,pData(df)[v],id=pData(df)[1])
gm
gm_m <- melt(gm,id.vars=c(v,"ID"))
gm_m
taxa <- unlist(apply(gm_m,1,function(x) if(x["variable"]%in%OTUsToKeep)return(x["variable"])else return("Others")))
gm_m$"taxa" <- as.factor(taxa)
gmx2 <- aggregate(as.formula(paste("value~",'ID+taxa+',paste(v,collapse="+"))),data=gm_m,FUN=sum) # Because some taxa now are xOthers so we need to summ their values
gmx2
gm_m <- melt(gm,id.vars=c(v,"ID"))
gm_m
gm_m$"taxa" <- gm_m$"variable"
gmx2 <- aggregate(as.formula(paste("value~",'ID+taxa+',paste(v,collapse="+"))),data=gm_m,FUN=sum) # Because some taxa now are xOthers so we need to summ their values
gmx2
ggplot(gmx2,aes(x=as.factor(gmx2[[v]]),y=value,fill=taxa))+geom_boxplot()+#geom_jitter(position=position_jitter(width=.2), size=0.5)+
scale_fill_manual(name=tl,values=palette) +
scale_x_discrete(v)+ylab("Proportion")+
ggtitle(paste(title,sep=""))+
theme(axis.text.x  = element_text(angle=0, vjust=0.5, size=12,face="bold"),
panel.grid.minor=element_blank(),panel.grid.major=element_blank(),
legend.position="bottom",legend.box="horizontal",
legend.text = element_text(size=9),
legend.title = element_text(size=10, face="bold"),
plot.title = element_text(lineheight=.12, face="bold"))
ggplot(gmx2,aes(x=as.factor(gmx2[[v]]),y=value,fill=taxa))+geom_boxplot()#+#geom_jitter(position=position_jitter(width=.2), size=0.5)+
ggplot(gmx2,aes(x=as.factor(gmx2[[v]]),y=value,fill=taxa))+geom_histogram()#+#geom_jitter(position=position_jitter(width=.2), size=0.5)+
ggplot(gmx2,aes(x=as.factor(gmx2[[v]]),y=value,fill=taxa))+geom_boxplot()#+#geom_jitter(position=position_jitter(width=.2), size=0.5)+
ggplot(gmx2,aes(x=as.factor(gmx2[[v]]),y=value,fill=taxa))+geom_boxplot()+#geom_jitter(position=position_jitter(width=.2), size=0.5)+
scale_fill_manual(name=tl)# +
title <- paste(tl," abundance distribution",sep='')
ggplot(gmx2,aes(x=as.factor(gmx2[[v]]),y=value,fill=taxa))+geom_boxplot()+#geom_jitter(position=position_jitter(width=.2), size=0.5)+
scale_fill_manual(name=tl,values=palette) +
title <- paste(tl," abundance distribution",sep='')
title <- paste(tl," abundance distribution",sep='')
ggplot(gmx2,aes(x=as.factor(gmx2[[v]]),y=value,fill=taxa))+geom_boxplot()+#geom_jitter(position=position_jitter(width=.2), size=0.5)+
#scale_fill_manual(name=tl)# +
scale_x_discrete(v)+ylab("Proportion")+
ggtitle(paste(title,sep=""))+
theme(axis.text.x  = element_text(angle=0, vjust=0.5, size=12,face="bold"),
panel.grid.minor=element_blank(),panel.grid.major=element_blank(),
legend.position="bottom",legend.box="horizontal",
legend.text = element_text(size=9),
legend.title = element_text(size=10, face="bold"),
plot.title = element_text(lineheight=.12, face="bold"))
ggplot(gmx2,aes(x=as.factor(gmx2[[v]]),y=value,fill=taxa))+geom_boxplot()+#geom_jitter(position=position_jitter(width=.2), size=0.5)+
#scale_fill_manual(name=tl)# +
scale_x_discrete(v)+ylab("Proportion")+
ggtitle(paste(title,sep=""))+
theme(axis.text.x  = element_text(angle=0, vjust=0.5, size=14,face="bold"),
panel.grid.minor=element_blank(),panel.grid.major=element_blank(),
legend.position="bottom",legend.box="horizontal",
legend.text = element_text(size=9),
legend.title = element_text(size=10, face="bold"),
plot.title = element_text(lineheight=.12, face="bold"))
ggplot(gmx2,aes(x=as.factor(gmx2[[v]]),y=value,fill=taxa))+geom_boxplot()+#geom_jitter(position=position_jitter(width=.2), size=0.5)+
#scale_fill_manual(name=tl)# +
scale_x_discrete(v)+ylab("Proportion")+
ggtitle(paste(title,sep=""))+
theme(axis.text.x  = element_text(angle=0, vjust=0.5, size=14,face="bold"),
panel.grid.minor=element_blank(),panel.grid.major=element_blank(),
legend.position="bottom",legend.box="horizontal",
legend.text = element_text(size=9),
legend.title = element_text(size=14, face="bold"),
plot.title = element_text(lineheight=.12, face="bold"))
ggplot(gmx2,aes(x=as.factor(gmx2[[v]]),y=value,fill=taxa))+geom_boxplot()+#geom_jitter(position=position_jitter(width=.2), size=0.5)+
#scale_fill_manual(name=tl)# +
scale_x_discrete(v)+ylab("Proportion")+
ggtitle(paste(title,sep=""))+
theme(axis.text.x  = element_text(angle=0, vjust=0.5, size=14,face="bold"),
panel.grid.minor=element_blank(),panel.grid.major=element_blank(),
legend.position="bottom",legend.box="horizontal",
legend.text = element_text(size=9),
legend.title = element_text(size=14, face="bold"),
plot.title = element_text(lineheight=.16, face="bold"))
source(toolbox)
tl <- 'Genus'
otu <- 'Ruminococcus'
taxonprop (dfp,v,tl,otu,o)
o <- paste(p,'age/',sep='')#commandArgs()[8] # paste(p,'results/',sep='') #
o
taxonprop (dfp,v,tl,otu,o)
toolbox
source(toolbox)
taxonprop (dfp,v,tl,otu,o)
source(toolbox)
tl <- 'Genus'
otu <- 'Ruminococcus'
taxonprop (dfp,v,tl,otu,o)
